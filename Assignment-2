
26. Hello World

#include <iostream>
using namespace std;

int main() {
    cout << "Hello, World!" << endl;
    return 0;
}


27. Sum of Command Line Arguments

#include <iostream>
using namespace std;

int main(int argc, char* argv[]) {
    if (argc != 3) {
        cout << "Usage: " << argv[0] << " num1 num2" << endl;
        return 1;
    }
    int num1 = stoi(argv[1]);
    int num2 = stoi(argv[2]);
    cout << "Sum: " << num1 + num2 << endl;
    return 0;
}


28. Factorial Function Prototype

#include <iostream>
using namespace std;

int factorial(int n);

int main() {
    // Function call
    return 0;
}

int factorial(int n) {
    if (n == 0 || n == 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}


29. Maximum of Three Numbers

#include <iostream>
using namespace std;

int max(int a, int b, int c);

int main() {
    cout << max(10, 20, 30) << endl;
    return 0;
}

int max(int a, int b, int c) {
    if (a >= b && a >= c) {
        return a;
    } else if (b >= a && b >= c) {
        return b;
    } else {
        return c;
    }
}


30. Area of Circle

#include <iostream>
using namespace std;

double areaOfCircle(double radius);

int main() {
    cout << areaOfCircle(5.0) << endl;
    return 0;
}

double areaOfCircle(double radius) {
    const double PI = 3.14159;
    return PI * radius * radius;
}


31. Product of Two Integers

#include <iostream>
using namespace std;

int product(int a, int b);

int main() {
    cout << product(10, 20) << endl;
    return 0;
}

int product(int a, int b) {
    return a * b;
}


32. Print Array Elements

#include <iostream>
using namespace std;

void printArray(int arr[], int size);

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    printArray(arr, 5);
    return 0;
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}


33. Swap Two Integers

#include <iostream>
using namespace std;

void swap(int& a, int& b);

int main() {
    int a = 10, b = 20;
    swap(a, b);
    cout << "a: " << a << ", b: " << b << endl;
    return 0;
}

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}


34. Increment by 10

#include <iostream>
using namespace std;

void incrementBy10(int& num);

int main() {
    int num = 10;
    incrementBy10(num);
    cout << "num: " << num << endl;
    return 0;
}

void incrementBy10(int& num) {
    num += 10;
}


35. Modify Array Elements

#include <iostream>
using namespace std;

void modifyArray(int arr[], int size);

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    modifyArray(arr, 5);
    for (int i = 0; i < 5; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}

void modifyArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] *= 2;
    }
}


36. Inline Square Function:: Square of a Number

#include <iostream>
using namespace std;

inline int square(int x) {
    return x * x;
}

int main() {
    cout << square(5) << endl;
    return 0;
}
Here are the C++ programs for each of the given problems:

37. Inline Cube Function

#include <iostream>
using namespace std;

inline int cube(int x) {
    return x * x * x;
}

int main() {
    cout << cube(5) << endl;
    return 0;
}


38. Inline Sum Function

#include <iostream>
using namespace std;

inline int sum(int a, int b) {
    return a + b;
}

int main() {
    cout << sum(10, 20) << endl;
    return 0;
}


39. Macro vs Inline Square Function

#include <iostream>
using namespace std;

#define SQUARE_MACRO(x) ((x) * (x))

inline int squareInline(int x) {
    return x * x;
}

int main() {
    int x = 5;
    cout << "Macro: " << SQUARE_MACRO(x) << endl;
    cout << "Inline: " << squareInline(x) << endl;
    return 0;
}


40. Macro vs Inline Max Function

#include <iostream>
using namespace std;

#define MAX_MACRO(a, b) ((a) > (b) ? (a) : (b))

inline int maxInline(int a, int b) {
    return (a > b) ? a : b;
}

int main() {
    int a = 10, b = 20;
    cout << "Macro: " << MAX_MACRO(a, b) << endl;
    cout << "Inline: " << maxInline(a, b) << endl;
    return 0;
}


41. Overloaded Area Functions

#include <iostream>
using namespace std;

double area(double radius) {
    return 3.14159 * radius * radius;
}

double area(double length, double width) {
    return length * width;
}

double area(double a, double b, double c) {
    double s = (a + b + c) / 2;
    return sqrt(s * (s - a) * (s - b) * (s - c));
}

int main() {
    cout << area(5.0) << endl;  // Circle
    cout << area(4.0, 5.0) << endl;  // Rectangle
    cout << area(3.0, 4.0, 5.0) << endl;  // Triangle
    return 0;
}


42. Overloaded Max Functions

#include <iostream>
using namespace std;

int max(int a, int b) {
    return (a > b) ? a : b;
}

int max(int a, int b, int c) {
    return max(max(a, b), c);
}

int main() {
    cout << max(10, 20) << endl;
    cout << max(10, 20, 30) << endl;
    return 0;
}


43. Overloaded Print Functions

#include <iostream>
using namespace std;

void print(int x) {
    cout << "Int: " << x << endl;
}

void print(float x) {
    cout << "Float: " << x << endl;
}

void print(string x) {
    cout << "String: " << x << endl;
}

int main() {
    print(10);
    print(10.5f);
    print("Hello");
    return 0;
}


44. Compound Interest Function

#include <iostream>
using namespace std;

double compoundInterest(double principal, double rate, double time, int n = 1) {
    return principal * pow(1 + rate / n, n * time);
}

int main() {
    cout << compoundInterest(1000, 0.05, 5) << endl;
    cout << compoundInterest(1000, 0.05, 5, 2) << endl;
    return 0;
}


45. Greeting Function

#include <iostream>
using namespace std;

void greet(string name = "Guest") {
    cout << "Hello, " << name << "!" << endl;
}

int main() {
    greet();
    greet("John");
    return 0;
}


46. Power Function

#include <iostream>
using namespace std;

double power(double base, int exponent = 2) {
    return pow(base, exponent);
}

int main() {
    cout << power(5) << endl;
    cout << power(5, 3) << endl;
    return 0;
}
Here are the C++ programs for each of the given problems:

47. Recursive Function

#include <iostream>
using namespace std;

int factorial(int n) {
    if (n == 0 || n == 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

int main() {
    cout << factorial(5) << endl;
    return 0;
}


48. Array of Function Pointers

#include <iostream>
using namespace std;

void add(int a, int b) {
    cout << "Addition: " << a + b << endl;
}

void subtract(int a, int b) {
    cout << "Subtraction: " << a - b << endl;
}

void multiply(int a, int b) {
    cout << "Multiplication: " << a * b << endl;
}

int main() {
    void (*operations[3])(int, int) = {add, subtract, multiply};
    operations[0](10, 5);
    operations[1](10, 5);
    operations[2](10, 5);
    return 0;
}


49. Function Templates

#include <iostream>
using namespace std;

template <typename T>
T max(T a, T b) {
    return (a > b) ? a : b;
}

int main() {
    cout << max(10, 20) << endl;
    cout << max(10.5, 20.7) << endl;
    cout << max('a', 'z') << endl;
    return 0;
}


50. Function Pointers and Callback Functions

#include <iostream>
using namespace std;

void callbackFunction() {
    cout << "Callback function called!" << endl;
}

void executeCallback(void (*callback)()) {
    callback();
}

int main() {
    executeCallback(callbackFunction);
    return 0;
}
